name: Infra

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install dependencies
        run: |
           pip install flask
           
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Initial Test
        run: |
          export db=""
          pytest test_flaskr.py 

      - name: Validate Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: ami.pkr.hcl
      
      - name: Build Artifact packer AMI
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: "-color=false -on-error=abort"
          target: ami.pkr.hcl

        env:
          PACKER_LOG: 1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configuring AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_Demo }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_Demo }}
          aws-region: us-east-1
      - name: Fetch the AMIID from packer and store it in a variable and send it to a config file
        run: |
           amiID=`cat manifest.json | jq '.builds[0].artifact_id' | awk 'match($0, /ami-.*/) { print substr($0, RSTART, RLENGTH-1) }'`
           echo {\"ImageId\":\"$amiID\"} > amiconfig.json
           ls
           cat amiconfig.json
           rm manifest.json
      - name: Use the config file to create launch template version
        run: |
            aws ec2 create-launch-template-version --launch-template-name LaunchTemplate --version-description WebApp --source-version 1 --launch-template-data file://amiconfig.json
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name asg-launch --desired-capacity 1 --cli-input-json file://update.json

      - name: Use the json file to refresh instances to use latest launch template
        run: |
             aws autoscaling start-instance-refresh --auto-scaling-group-name asg-launch --preferences '{"InstanceWarmup": 100, "MinHealthyPercentage": 50}' --desired-configuration file://version.json
